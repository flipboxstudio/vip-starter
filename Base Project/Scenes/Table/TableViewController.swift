//
//  TableViewController.swift
//  Base Project
//
//  Created by Saminos on 07/06/17.
//  Copyright (c) 2017 Flipbox. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

import UIKit

protocol TableViewControllerInterface
{
  func displayFetchedPost(viewModel: Table.FetchPost.ViewModel)
}

class TableViewController: UITableViewController, TableViewControllerInterface
{
  var output: TableInteractorInterface!
  var router: TableRouter!
  
  var posts:[Post] = []
  
  // MARK: - Object lifecycle
  override func awakeFromNib()
  {
    super.awakeFromNib()
    TableConfigurator.sharedInstance.configure(viewController: self)
  }
  
  // MARK: - View lifecycle
  
  override func viewDidLoad()
  {
    super.viewDidLoad()
    addingEvent()
    settingProperty()
    fetchPost()
  }
  
  override func viewDidLayoutSubviews() {
    super.viewDidLayoutSubviews()
    changePosition()
  }
  
  // MARK: - Event handling
  
  func settingProperty() {
    tableView.tableFooterView = UIView()
  }
  
  func changePosition() {
    
  }
  
  func addingEvent() {
    refreshControl?.addTarget(self, action: #selector(refreshTableView), for: UIControlEvents.valueChanged)
  }
  
  func refreshTableView() {
    fetchPost()
  }
  
  func fetchPost()
  {
    // NOTE: Ask the Interactor to do some work
    if !refreshControl!.isRefreshing {
      self.tableView.setContentOffset(CGPoint(x: 0, y: -refreshControl!.bounds.height), animated: true)
      refreshControl?.beginRefreshing()
    }
    
    let request = Table.FetchPost.Request()
    output.fetchPost(request: request)
  }
  
  // MARK: - Display logic
  
  func displayFetchedPost(viewModel: Table.FetchPost.ViewModel) {
    
    if let errorMessage = viewModel.errorMessage {
      Alert.showError(viewController: self, message: errorMessage) { [weak self] okAction in
        guard let s = self else { return }
        s.refreshControl?.endRefreshing()
      }
      return
    } else if viewModel.post.count < 1 {
      Alert.showInfo(viewController: self, title: "", message: "Your post is empty") { [weak self] okAction in
        guard let s = self else { return }
        s.refreshControl?.endRefreshing()
      }
      return
    }
    
    posts = viewModel.post
    refreshControl?.endRefreshing()
    tableView.reloadData()
  }
  //MARK: - TableView Datasource
  
  override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
    return posts.count
  }
  
  override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
    let cell = tableView.dequeueReusableCell(withIdentifier: "basicCell")!
    cell.textLabel?.text = posts[indexPath.row].title
    return cell
  }
  
  
}
